@page "/watchvideo/{select}"
@using System.IO;
@using MongoDB.Bson;
@using System.Net;
@using VideoHosting.Data;
@using FirebaseAdmin;
@using System.Threading;
@using Firebase.Auth;
@using Firebase.Auth.Providers;
@using Firebase.Auth.Repository;
@using Firebase.Storage;
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@using VideoHosting.Services;
@inject VideoHosting.Services.MongoConnection mongoConnection




<PageTitle>D</PageTitle>
<div>
    <table border="1">
        <tr>
            <td style="vertical-align:top; border: 1px solid black; background-color: sandybrown ">

                <table style="width:100%">
                    <tr>
                        <td>
                            <table style="height: 100%">
                                <th colspan="5">
                                    <video id="videoPlayer" width="650" controls muted="muted" autoplay>
                                        <source src="C:\Users\dinar\source\repos\VideoHosting\VideoHosting\Source\zelenya.mp4" type="video/mp4" />
                                    </video>
                                    <InputFile OnChange="UploadFile"/>
                                </th>

                                <tr>
                                    <th>АВТОР</th>
                                    <th>@select</th>
                                    <th>ЛАЙКИ</th>
                                    <th>ДИЗЛАЙКИ</th>
                                    <th>ССЫЛКА</th>
                                </tr>
                                <tr>
                                    <th colspan="5">Описание</th>
                                </tr>
                                <tr>
                                    <th colspan="5" height="">Коменты</th>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>


            </td>

            <td style="width:25%">

                <table>
                    <tr>
                        <td>
                            <table>

                                @for (int i = 0; i < 30; i += 1)
                                {
                                    int index = i;
                                    <tr>
                                        <th colspan="3"><a href="https://www.youtube.com/"><img src="https://look.com.ua/pic/201209/1920x1080/look.com.ua-5032.jpg" /></a></th>
                                    </tr>
                                    <tr>
                                        <th colspan="2">
                                            <a @onclick="() => NavigateToAnswer(videos[index].Title)">@videos[i].Title</a>
                                        </th>
                                    </tr>
                                    <tr>
                                        <th colspan="2">автор + @i</th>
                                    </tr>
                                    <tr>
                                        <th>просмотры</th>
                                        <th>@nameee</th>
                                    </tr>
                                }
                            </table>
                        </td>
                    </tr>
                </table>


            </td>
        </tr>
    </table>
</div>




@code {

    FirebaseConnection firebaseConnection = new FirebaseConnection();
    public List<Video> videos = new List<Video>
    {
        new Video("Зеленая миля", "2", "3"),
        new Video("Побег из Шоушенка", "1", "3"),
        new Video("Форрест Гамп", "3", "1"),
        new Video("Заводной апельсин", "1", "4"),
        new Video("Назад в будущее", "2", "1"),
        new Video("Одержимость", "4", "2"),
        new Video("Темный рыцарь", "3", "1"),
        new Video("Хатико: Самый верный друг", "4", "3"),
        new Video("Крестный отец", "1", "3"),
        new Video("Терминатор 2: Судный день", "2", "1"),
        new Video("Игры разума", "3", "4"),
        new Video("Криминальное чтиво", "1", "2"),
        new Video("Красота по-американски", "4", "3"),
        new Video("Храброе сердце", "2", "1"),
        new Video("Достучаться до небес", "3", "4"),
        new Video("Матрица", "1", "2"),
        new Video("Леон", "2", "4"),
        new Video("Один дома", "4", "3"),
        new Video("Звездные войны: Эпизод IV – Новая надежда", "1", "3"),
        new Video("Красный дракон", "2", "1"),
        new Video("Гладиатор", "3", "2"),
        new Video("Унесенные ветром", "4", "1"),
        new Video("Убить Билла", "1", "4"),
        new Video("Начало", "2", "3"),
        new Video("Амели", "4", "2"),
        new Video("Джентльмены удачи", "3", "1"),
        new Video("Человек дождя", "1", "2"),
        new Video("Поймай меня, если сможешь", "2", "4"),
        new Video("Безумный Макс: Дорога ярости", "3", "1"),
        new Video("Укрощение строптивого", "4", "2"),
        new Video("Интерстеллар", "3", "2"),
        new Video("Остаться в живых", "4", "1"),
        new Video("Гарри Поттер и философский камень", "1", "3"),
        new Video("Железный человек", "2", "4"),
        new Video("Охотники за привидениями", "4", "3")
    };
    [Parameter]
    public string select { get; set; }
    private int currentCount = 0;
    string nameee = "noooooooooo";
    private void NavigateToAnswer(string select)
    {
        NavigationManager.NavigateTo($"/watchvideo/{select}");
    }
    async Task UploadFile(InputFileChangeEventArgs e)
    {
        //var file = e.File;
        var file = e.File;
        nameee = file.Name;
        // Вызовите метод загрузки файла в Firebase Storage
        var fileName = Guid.NewGuid().ToString() + "_" + file.Name;

        // Получите ссылку на файл в Firebase Storage
        var storage = new FirebaseStorage("iwatch-9ed3b.appspot.com");
        var reference = storage.Child("photos").Child(fileName);
        var task = reference.PutAsync(file.OpenReadStream());
        var downloadUrl = await task;
        // Откройте поток для чтения содержимого файла
        //using (var stream = file.OpenReadStream())
        //{
        //     Загрузите файл в Firebase Storage
        //    await reference.PutAsync(stream);
        //}
        //var uploadTask = new FirebaseStorage("gs:iwatch-9ed3b.appspot.com").Child("videos").Child(file.Name).PutAsync(file.OpenReadStream());
        //var stream = File.Open();
        //var task = new FirebaseStorage("gs:iwatch-9ed3b.appspot.com").Child("video").PutAsync();
        //var downloadUrl = await uploadTask;
        nameee = "goooes";
    }

    private static string ApiKey = "AIzaSyBK89hgZoAR6CIDaMrLpuCOs-LwLL55Pes";
    private static string Bucket = "forumapp-c42a5.appspot.com";
    private static string AuthEmail = "konor@gmail.com";
    private static string AuthPasword = "konor123";

    FileStream df;

    private async Task OnSubmit(InputFileChangeEventArgs e)
    {
        String folder = "imgUser";
        String pathFolder = $"/wwwroot/{folder}/";
        RemoveFolder(folder);
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            try
            {
                var auth = new FirebaseAuthProvider(new Firebase.Auth.FirebaseConfig(ApiKey));
                var a = await auth.SignInWithEmailAndPasswordAsync(AuthEmail, AuthPasword);

                Stream stream = file.OpenReadStream();
                var path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + pathFolder)}{file.Name}";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                df = fs;

                stream.Close();
                fs.Close();

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                throw;
            }
        }
    }

    public async Task UploadData()
    {
        var auth = new FirebaseAuthProvider(new Firebase.Auth.FirebaseConfig(ApiKey));
        var a = await auth.SignInWithEmailAndPasswordAsync(AuthEmail, AuthPasword);

        var fileName = @"C:\geoskillLogo.png";


        String pathFolder = $"/wwwroot/imgUser/";
        String path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + pathFolder)}";
        path = path.Replace("/", @"\");



        List<String> imgNames = GetNamesOfDir("imgUser");

        foreach (var name in imgNames)
        {

            using (FileStream fs = new FileStream($"{path}{name}", FileMode.Open))
            {
                var cancellation = new CancellationTokenSource();

                var task = new FirebaseStorage(
                    Bucket,
                    new FirebaseStorageOptions
                        {
                            AuthTokenAsyncFactory = () => Task.FromResult(a.FirebaseToken),
                            ThrowOnCancel = true
                        }).Child("TestFromAsp").Child("Test").Child($"{name}").PutAsync(fs, cancellation.Token);

                var r = await task;
            }
        }
    }

    public static List<String> GetNamesOfDir(String folder)
    {
        String pathFolder = $"/wwwroot/{folder}/";

        String path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + pathFolder)}";
        path = path.Replace("/", @"\");
        DirectoryInfo info = new DirectoryInfo($"{path}");

        List<String> listNames = new List<string>();

        foreach (var item in info.GetFiles())
        {
            listNames.Add(item.Name);
        }
        return listNames;
    }


    public static void RemoveFolder(String folder)
    {
        String pathFolder = $"/wwwroot/{folder}/";

        String path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + pathFolder)}";
        DirectoryInfo dirInfo = new DirectoryInfo(path);

        if (dirInfo.GetFiles().Length != 0)
        {
            foreach (FileInfo f in dirInfo.GetFiles())
            {
                f.Delete();
            }
        }

    }
}
